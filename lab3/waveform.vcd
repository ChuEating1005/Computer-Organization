$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 q clk $end
  $var wire 32 s r[0] [31:0] $end
  $var wire 32 } r[10] [31:0] $end
  $var wire 32 ~ r[11] [31:0] $end
  $var wire 32 !! r[12] [31:0] $end
  $var wire 32 "! r[13] [31:0] $end
  $var wire 32 #! r[14] [31:0] $end
  $var wire 32 $! r[15] [31:0] $end
  $var wire 32 %! r[16] [31:0] $end
  $var wire 32 &! r[17] [31:0] $end
  $var wire 32 '! r[18] [31:0] $end
  $var wire 32 (! r[19] [31:0] $end
  $var wire 32 t r[1] [31:0] $end
  $var wire 32 )! r[20] [31:0] $end
  $var wire 32 *! r[21] [31:0] $end
  $var wire 32 +! r[22] [31:0] $end
  $var wire 32 ,! r[23] [31:0] $end
  $var wire 32 -! r[24] [31:0] $end
  $var wire 32 .! r[25] [31:0] $end
  $var wire 32 /! r[26] [31:0] $end
  $var wire 32 0! r[27] [31:0] $end
  $var wire 32 1! r[28] [31:0] $end
  $var wire 32 2! r[29] [31:0] $end
  $var wire 32 u r[2] [31:0] $end
  $var wire 32 3! r[30] [31:0] $end
  $var wire 32 4! r[31] [31:0] $end
  $var wire 32 v r[3] [31:0] $end
  $var wire 32 w r[4] [31:0] $end
  $var wire 32 x r[5] [31:0] $end
  $var wire 32 y r[6] [31:0] $end
  $var wire 32 z r[7] [31:0] $end
  $var wire 32 { r[8] [31:0] $end
  $var wire 32 | r[9] [31:0] $end
  $var wire  1 r start $end
  $scope module SingleCycleCPU $end
   $var wire  4 & ALUCtl [3:0] $end
   $var wire  2 ? ALUOp_EX [1:0] $end
   $var wire  2 > ALUOp_ID [1:0] $end
   $var wire 32 2 ALUOut_EX [31:0] $end
   $var wire 32 k ALUOut_MEM [31:0] $end
   $var wire 32 l ALUOut_WB [31:0] $end
   $var wire 32 % MuxSelB_Out [31:0] $end
   $var wire 32 # PC [31:0] $end
   $var wire 32 $ PC_plus4 [31:0] $end
   $var wire  1 A SelB_EX $end
   $var wire  1 @ SelB_ID $end
   $var wire  1 q clk $end
   $var wire  3 ( funct3 [2:0] $end
   $var wire  1 ' funct7 $end
   $var wire 32 1 imm_EX [31:0] $end
   $var wire 32 0 imm_ID [31:0] $end
   $var wire 32 * inst_ID [31:0] $end
   $var wire 32 ) inst_IF [31:0] $end
   $var wire  1 4 memRead_EX $end
   $var wire  1 3 memRead_ID $end
   $var wire  1 n memRead_MEM $end
   $var wire  1 6 memWrite_EX $end
   $var wire  1 5 memWrite_ID $end
   $var wire  1 7 memWrite_MEM $end
   $var wire  1 9 memtoReg_EX $end
   $var wire  1 8 memtoReg_ID $end
   $var wire  1 : memtoReg_MEM $end
   $var wire  1 o memtoReg_WB $end
   $var wire 32 s r[0] [31:0] $end
   $var wire 32 } r[10] [31:0] $end
   $var wire 32 ~ r[11] [31:0] $end
   $var wire 32 !! r[12] [31:0] $end
   $var wire 32 "! r[13] [31:0] $end
   $var wire 32 #! r[14] [31:0] $end
   $var wire 32 $! r[15] [31:0] $end
   $var wire 32 %! r[16] [31:0] $end
   $var wire 32 &! r[17] [31:0] $end
   $var wire 32 '! r[18] [31:0] $end
   $var wire 32 (! r[19] [31:0] $end
   $var wire 32 t r[1] [31:0] $end
   $var wire 32 )! r[20] [31:0] $end
   $var wire 32 *! r[21] [31:0] $end
   $var wire 32 +! r[22] [31:0] $end
   $var wire 32 ,! r[23] [31:0] $end
   $var wire 32 -! r[24] [31:0] $end
   $var wire 32 .! r[25] [31:0] $end
   $var wire 32 /! r[26] [31:0] $end
   $var wire 32 0! r[27] [31:0] $end
   $var wire 32 1! r[28] [31:0] $end
   $var wire 32 2! r[29] [31:0] $end
   $var wire 32 u r[2] [31:0] $end
   $var wire 32 3! r[30] [31:0] $end
   $var wire 32 4! r[31] [31:0] $end
   $var wire 32 v r[3] [31:0] $end
   $var wire 32 w r[4] [31:0] $end
   $var wire 32 x r[5] [31:0] $end
   $var wire 32 y r[6] [31:0] $end
   $var wire 32 z r[7] [31:0] $end
   $var wire 32 { r[8] [31:0] $end
   $var wire 32 | r[9] [31:0] $end
   $var wire 32 7! readData_MEM [31:0] $end
   $var wire 32 m readData_WB [31:0] $end
   $var wire  1 < regWrite_EX $end
   $var wire  1 ; regWrite_ID $end
   $var wire  1 = regWrite_MEM $end
   $var wire  1 p regWrite_WB $end
   $var wire 32 - rs1_EX [31:0] $end
   $var wire 32 5! rs1_ID [31:0] $end
   $var wire 32 . rs2_EX [31:0] $end
   $var wire 32 6! rs2_ID [31:0] $end
   $var wire 32 / rs2_MEM [31:0] $end
   $var wire  1 r start $end
   $var wire 32 i writeData [31:0] $end
   $var wire  5 + writeReg_EX [4:0] $end
   $var wire  5 , writeReg_MEM [4:0] $end
   $var wire  5 j writeReg_WB [4:0] $end
   $scope module m_ALU $end
    $var wire 32 - A [31:0] $end
    $var wire 32 2 ALUOut [31:0] $end
    $var wire  4 & ALUctl [3:0] $end
    $var wire 32 % B [31:0] $end
   $upscope $end
   $scope module m_ALUCtrl $end
    $var wire  4 & ALUCtl [3:0] $end
    $var wire  2 ? ALUOp [1:0] $end
    $var wire  3 ( funct3 [2:0] $end
    $var wire  1 ' funct7 $end
   $upscope $end
   $scope module m_Adder_1 $end
    $var wire 32 # a [31:0] $end
    $var wire 32 8! b [31:0] $end
    $var wire 32 $ sum [31:0] $end
   $upscope $end
   $scope module m_Control $end
    $var wire  2 > ALUOp [1:0] $end
    $var wire  1 @ SelB $end
    $var wire  7 C ctrl [6:0] $end
    $var wire  1 3 memRead $end
    $var wire  1 5 memWrite $end
    $var wire  1 8 memtoReg $end
    $var wire  7 B opcode [6:0] $end
    $var wire  1 ; regWrite $end
   $upscope $end
   $scope module m_DataMemory $end
    $var wire 32 k address [31:0] $end
    $var wire  1 q clk $end
    $var wire  1 n memRead $end
    $var wire  1 7 memWrite $end
    $var wire 32 7! readData [31:0] $end
    $var wire  1 r rst $end
    $var wire 32 / writeData [31:0] $end
   $upscope $end
   $scope module m_EXReg $end
    $var wire  2 > ALUOp_in [1:0] $end
    $var wire  2 ? ALUOp_out [1:0] $end
    $var wire  1 @ SelB_in $end
    $var wire  1 A SelB_out $end
    $var wire  1 q clk $end
    $var wire  3 E funct3_in [2:0] $end
    $var wire  3 ( funct3_out [2:0] $end
    $var wire  1 D funct7_in $end
    $var wire  1 ' funct7_out $end
    $var wire 32 0 imm_in [31:0] $end
    $var wire 32 1 imm_out [31:0] $end
    $var wire  1 3 memRead_in $end
    $var wire  1 4 memRead_out $end
    $var wire  1 5 memWrite_in $end
    $var wire  1 6 memWrite_out $end
    $var wire  1 8 memtoReg_in $end
    $var wire  1 9 memtoReg_out $end
    $var wire  1 ; regWrite_in $end
    $var wire  1 < regWrite_out $end
    $var wire 32 5! rs1_in [31:0] $end
    $var wire 32 - rs1_out [31:0] $end
    $var wire 32 6! rs2_in [31:0] $end
    $var wire 32 . rs2_out [31:0] $end
    $var wire  1 r rst $end
    $var wire  5 F writeReg_in [4:0] $end
    $var wire  5 + writeReg_out [4:0] $end
   $upscope $end
   $scope module m_IDReg $end
    $var wire  1 q clk $end
    $var wire 32 ) inst_in [31:0] $end
    $var wire 32 * inst_out [31:0] $end
    $var wire  1 r rst $end
   $upscope $end
   $scope module m_ImmGen $end
    $var wire 32 0 imm [31:0] $end
    $var wire 32 * inst [31:0] $end
    $var wire  7 B opcode [6:0] $end
   $upscope $end
   $scope module m_InstMem $end
    $var wire 32 ) inst [31:0] $end
    $var wire 32 # readAddr [31:0] $end
   $upscope $end
   $scope module m_MEMReg $end
    $var wire 32 2 ALUResult_in [31:0] $end
    $var wire 32 k ALUResult_out [31:0] $end
    $var wire  1 q clk $end
    $var wire  1 4 memRead_in $end
    $var wire  1 n memRead_out $end
    $var wire  1 6 memWrite_in $end
    $var wire  1 7 memWrite_out $end
    $var wire  1 9 memtoReg_in $end
    $var wire  1 : memtoReg_out $end
    $var wire  1 < regWrite_in $end
    $var wire  1 = regWrite_out $end
    $var wire 32 . rs2_in [31:0] $end
    $var wire 32 / rs2_out [31:0] $end
    $var wire  1 r rst $end
    $var wire  5 + writeReg_in [4:0] $end
    $var wire  5 , writeReg_out [4:0] $end
   $upscope $end
   $scope module m_Mux_SelB $end
    $var wire 32 % out [31:0] $end
    $var wire 32 . s0 [31:0] $end
    $var wire 32 1 s1 [31:0] $end
    $var wire  1 A sel $end
    $var wire 32 9! size [31:0] $end
   $upscope $end
   $scope module m_Mux_WriteData $end
    $var wire 32 i out [31:0] $end
    $var wire 32 l s0 [31:0] $end
    $var wire 32 m s1 [31:0] $end
    $var wire  1 o sel $end
    $var wire 32 9! size [31:0] $end
   $upscope $end
   $scope module m_PC $end
    $var wire  1 q clk $end
    $var wire 32 $ pc_i [31:0] $end
    $var wire 32 # pc_o [31:0] $end
    $var wire  1 r rst $end
   $upscope $end
   $scope module m_Register $end
    $var wire  1 q clk $end
    $var wire 32 5! readData1 [31:0] $end
    $var wire 32 6! readData2 [31:0] $end
    $var wire  5 G readReg1 [4:0] $end
    $var wire  5 H readReg2 [4:0] $end
    $var wire  1 p regWrite $end
    $var wire 32 I regs[0] [31:0] $end
    $var wire 32 S regs[10] [31:0] $end
    $var wire 32 T regs[11] [31:0] $end
    $var wire 32 U regs[12] [31:0] $end
    $var wire 32 V regs[13] [31:0] $end
    $var wire 32 W regs[14] [31:0] $end
    $var wire 32 X regs[15] [31:0] $end
    $var wire 32 Y regs[16] [31:0] $end
    $var wire 32 Z regs[17] [31:0] $end
    $var wire 32 [ regs[18] [31:0] $end
    $var wire 32 \ regs[19] [31:0] $end
    $var wire 32 J regs[1] [31:0] $end
    $var wire 32 ] regs[20] [31:0] $end
    $var wire 32 ^ regs[21] [31:0] $end
    $var wire 32 _ regs[22] [31:0] $end
    $var wire 32 ` regs[23] [31:0] $end
    $var wire 32 a regs[24] [31:0] $end
    $var wire 32 b regs[25] [31:0] $end
    $var wire 32 c regs[26] [31:0] $end
    $var wire 32 d regs[27] [31:0] $end
    $var wire 32 e regs[28] [31:0] $end
    $var wire 32 f regs[29] [31:0] $end
    $var wire 32 K regs[2] [31:0] $end
    $var wire 32 g regs[30] [31:0] $end
    $var wire 32 h regs[31] [31:0] $end
    $var wire 32 L regs[3] [31:0] $end
    $var wire 32 M regs[4] [31:0] $end
    $var wire 32 N regs[5] [31:0] $end
    $var wire 32 O regs[6] [31:0] $end
    $var wire 32 P regs[7] [31:0] $end
    $var wire 32 Q regs[8] [31:0] $end
    $var wire 32 R regs[9] [31:0] $end
    $var wire  1 r rst $end
    $var wire 32 i writeData [31:0] $end
    $var wire  5 j writeReg [4:0] $end
   $upscope $end
   $scope module m_WBReg $end
    $var wire 32 k ALUResult_in [31:0] $end
    $var wire 32 l ALUResult_out [31:0] $end
    $var wire  1 q clk $end
    $var wire  1 : memtoReg_in $end
    $var wire  1 o memtoReg_out $end
    $var wire 32 7! readData_in [31:0] $end
    $var wire 32 m readData_out [31:0] $end
    $var wire  1 = regWrite_in $end
    $var wire  1 p regWrite_out $end
    $var wire  1 r rst $end
    $var wire  5 , writeReg_in [4:0] $end
    $var wire  5 j writeReg_out [4:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000100 $
b00000000000000000000000000000000 %
b0010 &
0'
b000 (
b00001010001100000000010000010011 )
b00000000000000000000000000000000 *
b00000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
03
04
05
06
07
08
09
0:
0;
0<
0=
b00 >
b00 ?
0@
0A
b0000000 B
b0000000 C
0D
b000 E
b00000 F
b00000 G
b00000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
0n
0o
0p
0q
1r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b00000000000000000000000000000100 8!
b00000000000000000000000000100000 9!
#1
b00000000000000000000000010000000 K
1q
0r
b00000000000000000000000010000000 u
#2
0q
1r
#3
b00000000000000000000000000000100 #
b00000000000000000000000000001000 $
b11111111110000010000000100010011 )
b00001010001100000000010000010011 *
b00000000000000000000000010100011 0
1;
b11 >
1@
b0010011 B
b0011011 C
b01000 F
b00011 H
1q
#4
0q
#5
b00000000000000000000000000001000 #
b00000000000000000000000000001100 $
b00000000000000000000000010100011 %
b00000000100000010010000000100011 )
b11111111110000010000000100010011 *
b01000 +
b11111111111111111111111111111100 0
b00000000000000000000000010100011 1
b00000000000000000000000010100011 2
1<
b11 ?
1A
1D
b00010 F
b00010 G
b11100 H
1q
b00000000000000000000000010000000 5!
#6
0q
#7
b00000000000000000000000000001100 #
b00000000000000000000000000010000 $
b11111111111111111111111111111100 %
1'
b00000000000000000000010000110011 )
b00000000100000010010000000100011 *
b00010 +
b01000 ,
b00000000000000000000000010000000 -
b00000000000000000000000000000000 0
b11111111111111111111111111111100 1
b00000000000000000000000001111100 2
15
0;
1=
b00 >
b0100011 B
b0000110 C
0D
b010 E
b00000 F
b01000 H
b00000000000000000000000010100011 k
1q
#8
0q
#9
b00000000000000000000000000010000 #
b00000000000000000000000000010100 $
b00000000000000000000000000000000 %
0'
b010 (
b00000000000000000000001010010011 )
b00000000000000000000010000110011 *
b00000 +
b00010 ,
b00000000000000000000000000000000 1
b00000000000000000000000010000000 2
05
16
1;
0<
b10 >
b00 ?
0@
b0110011 B
b0010001 C
b000 E
b01000 F
b00000 G
b00000 H
b00000000000000000000000010100011 i
b01000 j
b00000000000000000000000001111100 k
b00000000000000000000000010100011 l
1p
1q
b00000000000000000000000000000000 5!
#10
b00000000000000000000000010100011 Q
0q
b00000000000000000000000010100011 {
#11
b00000000000000000000000000010100 #
b00000000000000000000000000011000 $
b000 (
b00000000011100101010001100010011 )
b00000000000000000000001010010011 *
b01000 +
b00000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 2
06
17
1<
0=
b11 >
b10 ?
1@
0A
b0010011 B
b0011011 C
b00101 F
b00000000000000000000000001111100 i
b00010 j
b00000000000000000000000010000000 k
b00000000000000000000000001111100 l
1q
#12
b00000000000000000000000001111100 K
0q
b00000000000000000000000001111100 u
#13
b00000000000000000000000000011000 #
b00000000000000000000000000011100 $
b00000000101000110110001100010011 )
b00000000011100101010001100010011 *
b00101 +
b01000 ,
b00000000000000000000000000000111 0
07
1=
b11 ?
1A
b010 E
b00110 F
b00101 G
b00111 H
b00000000000000000000000010000000 i
b00000 j
b00000000000000000000000000000000 k
b00000000000000000000000010000000 l
0p
1q
#14
0q
#15
b00000000000000000000000000011100 #
b00000000000000000000000000100000 $
b00000000000000000000000000000111 %
b0111 &
b010 (
b00000000000000010010010000000011 )
b00000000101000110110001100010011 *
b00110 +
b00101 ,
b00000000000000000000000000001010 0
b00000000000000000000000000000111 1
b00000000000000000000000000000001 2
b110 E
b00110 G
b01010 H
b00000000000000000000000000000000 i
b01000 j
b00000000000000000000000000000000 l
1p
1q
#16
b00000000000000000000000000000000 Q
0q
b00000000000000000000000000000000 {
#17
b00000000000000000000000000100000 #
b00000000000000000000000000100100 $
b00000000000000000000000000001010 %
b0001 &
b110 (
b00000000010000010000000100010011 )
b00000000000000010010010000000011 *
b00110 ,
b00000000000000000000000000000000 0
b00000000000000000000000000001010 1
b00000000000000000000000000001010 2
13
18
b00 >
b0000011 B
b1100011 C
b010 E
b01000 F
b00010 G
b00000 H
b00101 j
b00000000000000000000000000000001 k
1q
b00000000000000000000000001111100 5!
#18
0q
#19
b00000000000000000000000000100100 #
b00000000000000000000000000101000 $
b00000000000000000000000000000000 %
b0010 &
b010 (
b00000000000000000000000000000000 )
b00000000010000010000000100010011 *
b01000 +
b00000000000000000000000001111100 -
b00000000000000000000000000000100 0
b00000000000000000000000000000000 1
b00000000000000000000000001111100 2
03
14
08
19
b11 >
b00 ?
b0010011 B
b0011011 C
b000 E
b00010 F
b00100 H
b00000000000000000000000000000001 i
b00110 j
b00000000000000000000000000001010 k
b00000000000000000000000000000001 l
1q
#20
b00000000000000000000000000000001 O
0q
b00000000000000000000000000000001 y
#21
b00000000000000000000000000101000 #
b00000000000000000000000000101100 $
b00000000000000000000000000000100 %
b000 (
b00000000000000000000000000000000 *
b00010 +
b01000 ,
b00000000000000000000000000000000 0
b00000000000000000000000000000100 1
b00000000000000000000000010000000 2
04
09
1:
0;
b00 >
b11 ?
0@
b0000000 B
b0000000 C
b00000 F
b00000 G
b00000 H
b00000000000000000000000000001010 i
b00000000000000000000000001111100 k
b00000000000000000000000000001010 l
1n
1q
b00000000000000000000000000000000 5!
#22
b00000000000000000000000000001010 O
0q
b00000000000000000000000000001010 y
#23
b00000000000000000000000000101100 #
b00000000000000000000000000110000 $
b00000000000000000000000000000000 %
b00000 +
b00010 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
0:
0<
b00 ?
0A
b00000000000000000000000000000000 i
b01000 j
b00000000000000000000000010000000 k
b00000000000000000000000001111100 l
0n
1o
1q
#24
0q
#25
b00000000000000000000000000110000 #
b00000000000000000000000000110100 $
b00000 ,
0=
b00000000000000000000000010000000 i
b00010 j
b00000000000000000000000000000000 k
b00000000000000000000000010000000 l
0o
1q
#26
b00000000000000000000000010000000 K
0q
b00000000000000000000000010000000 u
#27
b00000000000000000000000000110100 #
b00000000000000000000000000111000 $
b00000000000000000000000000000000 i
b00000 j
b00000000000000000000000000000000 l
0p
1q
#28
0q
#29
b00000000000000000000000000111000 #
b00000000000000000000000000111100 $
1q
#30
0q
#31
b00000000000000000000000000111100 #
b00000000000000000000000001000000 $
1q
#32
0q
#33
b00000000000000000000000001000000 #
b00000000000000000000000001000100 $
1q
#34
0q
#35
b00000000000000000000000001000100 #
b00000000000000000000000001001000 $
1q
#36
0q
#37
b00000000000000000000000001001000 #
b00000000000000000000000001001100 $
1q
#38
0q
#39
b00000000000000000000000001001100 #
b00000000000000000000000001010000 $
1q
#40
0q
#41
b00000000000000000000000001010000 #
b00000000000000000000000001010100 $
1q
#42
0q
#43
b00000000000000000000000001010100 #
b00000000000000000000000001011000 $
1q
#44
0q
#45
b00000000000000000000000001011000 #
b00000000000000000000000001011100 $
1q
#46
0q
#47
b00000000000000000000000001011100 #
b00000000000000000000000001100000 $
1q
#48
0q
#49
b00000000000000000000000001100000 #
b00000000000000000000000001100100 $
1q
#50
0q
#51
b00000000000000000000000001100100 #
b00000000000000000000000001101000 $
1q
#52
0q
#53
b00000000000000000000000001101000 #
b00000000000000000000000001101100 $
1q
#54
0q
#55
b00000000000000000000000001101100 #
b00000000000000000000000001110000 $
1q
#56
0q
#57
b00000000000000000000000001110000 #
b00000000000000000000000001110100 $
1q
#58
0q
#59
b00000000000000000000000001110100 #
b00000000000000000000000001111000 $
1q
#60
0q
#61
b00000000000000000000000001111000 #
b00000000000000000000000001111100 $
1q
#62
0q
#63
b00000000000000000000000001111100 #
b00000000000000000000000010000000 $
1q
#64
0q
#65
b00000000000000000000000010000000 #
b00000000000000000000000010000100 $
1q
#66
0q
#67
b00000000000000000000000010000100 #
b00000000000000000000000010001000 $
1q
#68
0q
#69
b00000000000000000000000010001000 #
b00000000000000000000000010001100 $
1q
#70
0q
#71
b00000000000000000000000010001100 #
b00000000000000000000000010010000 $
1q
#72
0q
#73
b00000000000000000000000010010000 #
b00000000000000000000000010010100 $
1q
#74
0q
#75
b00000000000000000000000010010100 #
b00000000000000000000000010011000 $
1q
#76
0q
#77
b00000000000000000000000010011000 #
b00000000000000000000000010011100 $
1q
#78
0q
#79
b00000000000000000000000010011100 #
b00000000000000000000000010100000 $
1q
#80
0q
#81
b00000000000000000000000010100000 #
b00000000000000000000000010100100 $
1q
#82
0q
#83
b00000000000000000000000010100100 #
b00000000000000000000000010101000 $
1q
#84
0q
#85
b00000000000000000000000010101000 #
b00000000000000000000000010101100 $
1q
#86
0q
#87
b00000000000000000000000010101100 #
b00000000000000000000000010110000 $
1q
#88
0q
#89
b00000000000000000000000010110000 #
b00000000000000000000000010110100 $
1q
#90
0q
#91
b00000000000000000000000010110100 #
b00000000000000000000000010111000 $
1q
#92
0q
#93
b00000000000000000000000010111000 #
b00000000000000000000000010111100 $
1q
#94
0q
#95
b00000000000000000000000010111100 #
b00000000000000000000000011000000 $
1q
#96
0q
#97
b00000000000000000000000011000000 #
b00000000000000000000000011000100 $
1q
#98
0q
#99
b00000000000000000000000011000100 #
b00000000000000000000000011001000 $
1q
#100
0q
#101
b00000000000000000000000011001000 #
b00000000000000000000000011001100 $
1q
#102
0q
#103
b00000000000000000000000011001100 #
b00000000000000000000000011010000 $
1q
#104
